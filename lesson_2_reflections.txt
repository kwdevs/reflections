1. What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, a hidden .git directory is created.  You need to do this so git can start to save versions even though initially files in the specified directory will be untracked. 

2. How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area differs from the working directory and repository in that it is used as a place to hold items for a future commit.  Multiple items may then be joined together for a single commit at the staging area.  On the other hand, the working directory is where files are stored and manipulated locally and the repository holds files that have been commited. 

3. How can you use the staging area to make sure you have one commit per logical
change?

You can use git diff.

4. What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches come in handy in a variety of ways.  One example would be if you needed two copies of a project with minor differences like an easy and hard mode in a game.  When testing things out or making new features branches can also help keep things organized and allow the project to remain untouched until you complete the new features/tests.

5. How do the diagrams help you visualize the branch structure?

Diagrams give you a visual linear layout and makes it easy to see what commits will be seen by which branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?